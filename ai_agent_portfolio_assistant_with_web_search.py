# -*- coding: utf-8 -*-
"""AI_Agent_Portfolio_Assistant_with_Web_Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ndLPQJCM8ldT5naUXERvpxooY19SIOWK

# ðŸ¤– AI Portfolio Assistant with Autonomous Web Search
This notebook builds an intelligent assistant that:
- Analyzes your offshore wind project data (from Excel)
- Decides when to search the web for updates (e.g. policy news)
- Fetches relevant real-time info using Tavily
- Combines both to give strategic, context-rich answers

**Powered by OpenAI + LangChain + Tavily**
"""

!pip install langchain langchain-community langchain-core openai faiss-cpu pandas tavily-python

from google.colab import files
uploaded = files.upload()

import pandas as pd
from langchain.docstore.document import Document

df = pd.read_excel(list(uploaded.keys())[0])

documents = []
for _, row in df.iterrows():
    content = "\n".join([f"{col}: {row[col]}" for col in df.columns])
    documents.append(Document(page_content=content))

df.head()

import os
from langchain.embeddings import OpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA

os.environ['OPENAI_API_KEY'] = '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'  # Replace with your OpenAI key

embeddings = OpenAIEmbeddings()
db = FAISS.from_documents(documents, embeddings)
retriever = db.as_retriever(search_kwargs={"k": 20})
qa = RetrievalQA.from_chain_type(llm=OpenAI(), retriever=retriever)

from langchain.tools.tavily_search import TavilySearchResults
os.environ['TAVILY_API_KEY'] = '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'  # Replace with your Tavily key
search = TavilySearchResults(k=5)

def autonomous_answer(question):
    from langchain.llms import OpenAI

    # Step 1: Ask LLM if web search is needed
    planning_prompt = f'''
You are an assistant deciding whether a web search is needed.
Question: {question}
Return 'YES: [search query]' or 'NO'.
    '''
    planning_response = OpenAI().invoke(planning_prompt)
    print("Planning Decision:", planning_response)

    # Step 2: If YES, do search
    if planning_response.startswith("YES"):
        search_query = planning_response.split(":", 1)[1].strip()
        results = search.run(search_query)
        external_context = "\n".join([r['content'] for r in results])
    else:
        external_context = ""

    # Step 3: Get internal project insight
    internal_answer = qa.run(question)

    # Step 4: Final answer combining both
    combined_prompt = f'''
Based on the following internal portfolio insights and external market news, answer the user's question with explanations and suggestions.

Internal Portfolio Answer:
{internal_answer}

External Market News:
{external_context}

User Question: {question}
Answer:
    '''
    return OpenAI().invoke(combined_prompt)

question = input("Ask your portfolio assistant a question: ")
print(autonomous_answer(question))